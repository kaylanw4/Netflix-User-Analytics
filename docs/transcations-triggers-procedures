DELIMITER //

CREATE PROCEDURE analysis_create (
    IN analysis_year INT
)
BEGIN   
    START TRANSACTION ;
    DELETE FROM display;

    INSERT INTO display (tconst, primaryTitle, runtimeMinutes, Season, Episode, Date, titleType, id)
    SELECT t.tconst , t.primaryTitle, t.runtimeMinutes, u.Season, u.Episode, u.Date, t.titleType, u.id
    FROM user_info u
    JOIN title t ON u.Title = t.primaryTitle AND u.titleType = t.titleType
    WHERE SUBSTRING(u.Date, -2) = analysis_year;

    INSERT INTO display (tconst ,primaryTitle, runtimeMinutes, Season, Episode, Date, titleType, id)
    SELECT t.tconst, t.primaryTitle, t.runtimeMinutes, u.Season, u.Episode, u.Date, t.titleType, u.id 
    FROM user_info u
    JOIN (
        SELECT primaryTitle, MAX(numVotes) AS maxVotes
        FROM title
        WHERE runtimeMinutes <270
        GROUP BY primaryTitle
    ) AS max_votes ON u.Title = max_votes.primaryTitle
    JOIN title t ON u.Title = t.primaryTitle 
    AND NOT (t.titleType = 'movie' AND u.titleType = 'movie')
    AND t.numVotes = max_votes.maxVotes
    WHERE SUBSTRING(u.Date, -2) = analysis_year and t.titleType != 'movie';

    COMMIT;
END //

DELIMITER ;

##################################triggers################################################
DELIMITER //
-- Trigger for DELETE operation
CREATE TRIGGER trg_delete
AFTER DELETE
ON display
FOR EACH ROW
BEGIN
    DELETE FROM user_info WHERE id = OLD.id;
END//

-- Trigger for UPDATE operation
CREATE TRIGGER trg_update
AFTER UPDATE
ON display
FOR EACH ROW
BEGIN
    UPDATE user_info
    SET 
        Title = NEW.primaryTitle,
        Season = NEW.Season,
        Episode = NEW.Episode,
        Date = NEW.Date,
        titleType = NEW.titleType
    WHERE id = NEW.id;
END//

-- Trigger for INSERT operation
CREATE TRIGGER trg_insert
AFTER INSERT
ON display
FOR EACH ROW
BEGIN
    INSERT INTO user_info (id, Title, runtimeMinutes, Season, Episode, Date, titleType)
    VALUES (NEW.id, NEW.Title, NEW.runtimeMinutes, NEW.Season, NEW.Episode, NEW.Date, NEW.titleType);
END//

/////////////////////transcations////////////////////////////

// Endpoint to add a new display item with transaction
app.post('/api/display/add', function(req, res) {
    const { id,tconst, primaryTitle, runtimeMinutes, Season, Date, titleType } = req.body;

    // Begin a transaction
    const startTransactionQuery = `START TRANSACTION`;
    connection.query(startTransactionQuery, function(err) {
        if (err) {
            console.error('Error beginning transaction:', err);
            return res.status(500).send({ message: 'Error beginning transaction', error: err });
        }

        const sql = 'INSERT INTO display (id, tconst, primaryTitle, runtimeMinutes, Season, Date, titleType) VALUES (?, ?, ?, ?, ?, ?, ?)';
        connection.query(sql, [id, tconst, primaryTitle, runtimeMinutes, Season, Date, titleType], function(err, result) {
            if (err) {
                console.error('Error adding to display:', err);

                // Rollback the transaction if there's an error
                const rollbackQuery = `ROLLBACK`;
                connection.query(rollbackQuery, function(rollbackErr) {
                    if (rollbackErr) {
                        console.error('Error rolling back transaction:', rollbackErr);
                    }
                    console.error('Transaction rolled back.');
                    return res.status(500).send({ message: 'Error adding to display', error: err });
                });
            }

            // Commit the transaction if the query is successful
            const commitQuery = `COMMIT`;
            connection.query(commitQuery, function(commitErr) {
                if (commitErr) {
                    console.error('Error committing transaction:', commitErr);
                    return res.status(500).send({ message: 'Error committing transaction', error: commitErr });
                }
                console.log('Transaction committed successfully.');
                res.send({ message: 'Data added to display successfully' });
            });
        });
    });
});

// Endpoint to update a display item with transaction
app.post('/api/display/update/:id', function(req, res) {
    const displayId = req.params.id;
    const { primaryTitle, runtimeMinutes, Season, Date, titleType } = req.body;

    // Begin a transaction
    const startTransactionQuery = `START TRANSACTION`;
    connection.query(startTransactionQuery, function(err) {
        if (err) {
            console.error('Error beginning transaction:', err);
            return res.status(500).send({ message: 'Error beginning transaction', error: err });
        }

        const sql = 'UPDATE display SET primaryTitle = ?, runtimeMinutes = ?, Season = ?, Date = ?, titleType = ? WHERE id = ?';
        connection.query(sql, [primaryTitle, runtimeMinutes, Season, Date, titleType, displayId], function(err, result) {
            if (err) {
                console.error('Error updating display:', err);

                // Rollback the transaction if there's an error
                const rollbackQuery = `ROLLBACK`;
                connection.query(rollbackQuery, function(rollbackErr) {
                    if (rollbackErr) {
                        console.error('Error rolling back transaction:', rollbackErr);
                    }
                    console.error('Transaction rolled back.');
                    return res.status(500).send({ message: 'Error updating display', error: err });
                });
            }

            // Commit the transaction if the query is successful
            const commitQuery = `COMMIT`;
            connection.query(commitQuery, function(commitErr) {
                if (commitErr) {
                    console.error('Error committing transaction:', commitErr);
                    return res.status(500).send({ message: 'Error committing transaction', error: commitErr });
                }
                console.log('Transaction committed successfully.');
                res.send({ message: 'Display info updated successfully' });
            });
        });
    });
});

// Endpoint to delete a display item with transaction
app.post('/api/display/delete/:id', function(req, res) {
    const displayId = req.params.id;
    const sql = 'DELETE FROM display WHERE id = ?';

    // Begin a transaction
    const startTransactionQuery = `START TRANSACTION`;
    connection.query(startTransactionQuery, function(err) {
        if (err) {
            console.error('Error beginning transaction:', err);
            return res.status(500).send({ message: 'Error beginning transaction', error: err });
        }

        connection.query(sql, [displayId], function(err, result) {
            if (err) {
                console.error('Error deleting display info:', err);

                // Rollback the transaction if there's an error
                const rollbackQuery = `ROLLBACK`;
                connection.query(rollbackQuery, function(rollbackErr) {
                    if (rollbackErr) {
                        console.error('Error rolling back transaction:', rollbackErr);
                    }
                    console.error('Transaction rolled back.');
                    return res.status(500).send({ message: 'Error deleting display info', error: err });
                });
            }

            // Commit the transaction if the query is successful
            const commitQuery = `COMMIT`;
            connection.query(commitQuery, function(commitErr) {
                if (commitErr) {
                    console.error('Error committing transaction:', commitErr);
                    return res.status(500).send({ message: 'Error committing transaction', error: commitErr });
                }
                console.log('Transaction committed successfully.');
                res.send({ message: 'Display info deleted successfully' });
            });
        });
    });
});

